import numpy as np
from scipy.optimize import curve_fit
from scipy.interpolate import CubicSpline
def interpNewton_forward_diff(x, y, xi):
    """
    Interpolación de Newton usando diferencias hacia adelante.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        xi: Punto en el que se desea interpolar.
        
    Returns:
        El valor interpolado en xi.
    """
    n = len(x)
    F = np.zeros((n, n))
    F[:,0] = y
    
    for j in range(1, n):
        for i in range(n-j):
            F[i,j] = F[i+1,j-1] - F[i,j-1]
    
    res = F[0,0]
    u = (xi - x[0]) / (x[1] - x[0])
    fact = 1
    
    for i in range(1,n):
        res += (u * F[0,i]) / fact
        u *= (u - i)
        fact *= (i + 1)
    
    return res

def interpNewton_backward_diff(x, y, xi):
    """
    Interpolación de Newton usando diferencias hacia atrás.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        xi: Punto en el que se desea interpolar.
        
    Returns:
        El valor interpolado en xi.
    """
    n = len(x)
    F = np.zeros((n, n))
    F[:,0] = y
    
    for j in range(1, n):
        for i in range(j, n):
            F[i,j] = F[i,j-1] - F[i-1,j-1]
    
    res = F[n-1,0]
    u = (xi - x[n-1]) / (x[1] - x[0])
    fact = 1
    
    for i in range(1,n):
        res += (u * F[n-1,i]) / fact
        u *= (u + i)
        fact *= (i + 1)
    
    return res

def interpNewton_divided_diff(x, y, xi):
    """
    Interpolación de Newton usando diferencias divididas.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        xi: Punto en el que se desea interpolar.
        
    Returns:
        El valor interpolado en xi.
    """
    n = len(x)
    F = np.zeros((n, n))
    F[:,0] = y
    
    for j in range(1, n):
        for i in range(n-j):
            F[i,j] = (F[i+1,j-1] - F[i,j-1]) / (x[i+j] - x[i])
    
    res = F[0,0]
    
    for i in range(1, n):
        prod = 1
        for j in range(i):
            prod *= (xi - x[j])
        res += F[0,i] * prod
    
    return res

def lagrange_interpolation(x, y, xi):
    """
    Interpolación de Lagrange.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        xi: Punto en el que se desea interpolar.
        
    Returns:
        El valor interpolado en xi.
    """
    n = len(x)
    res = 0
    for i in range(n):
        term = y[i]
        for j in range(n):
            if j != i:
                term *= (xi - x[j]) / (x[i] - x[j])
        res += term
    return res

def lagrange_coefficients(x, y):
    """
    Coeficientes del polinomio interpolante de Lagrange.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        
    Returns:
        Una lista de coeficientes del polinomio interpolante.
    """
    n = len(x)
    coef = []
    for i in range(n):
        term = y[i]
        for j in range(n):
            if j != i:
                term /= (x[i] - x[j])
        coef.append(term)
    return coef

def inverse_interpolation(x, y, yi):
    """
    Interpolación inversa para encontrar el valor de la variable independiente correspondiente a un valor dado de la variable dependiente.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        yi: Valor de la variable dependiente para el que se desea encontrar el valor de la variable independiente.
        
    Returns:
        El valor de la variable independiente correspondiente al valor dado de la variable dependiente, si se encuentra dentro del rango, None en caso contrario.
    """
    for i in range(len(y)):
        if y[i] == yi:
            return x[i]
        elif i > 0 and i < len(y) - 1:
            if y[i] > yi > y[i + 1] or y[i] < yi < y[i + 1]:
                return x[i] + ((x[i + 1] - x[i]) / (y[i + 1] - y[i])) * (yi - y[i])
    return None

def linear_regression(x, y):
    """
    Regresión lineal.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        
    Returns:
        Una tupla (a, b) donde a es la pendiente y b es la intersección y = a * x + b.
    """
    n = len(x)
    mean_x = np.mean(x)
    mean_y = np.mean(y)
    
    numer = sum((x - mean_x) * (y - mean_y))
    denom = sum((x - mean_x) ** 2)
    
    b = numer / denom
    a = mean_y - b * mean_x
    
    return (a, b)

def polynomial_regression(x, y, degree):
    """
    Regresión polinomial.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        degree: Grado del polinomio de regresión.
        
    Returns:
        Los coeficientes del polinomio de regresión.
    """
    coeffs = np.polyfit(x, y, degree)
    return coeffs

def multiple_linear_regression(X, y):
    """
    Regresión lineal múltiple.
    
    Args:
        X: Matriz de características (variables independientes).
        y: Lista de valores y conocidos correspondientes a X.
        
    Returns:
        Una lista de coeficientes de regresión.
    """
    X = np.column_stack([X, np.ones(len(X))])
    coeffs = np.linalg.lstsq(X, y, rcond=None)[0]
    return coeffs

def segmented_interpolation(x, y, xi):
    """
    Interpolación segmentada utilizando splines cúbicos.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        xi: Punto en el que se desea interpolar.
        
    Returns:
        El valor interpolado en xi.
    """
    # Crear el objeto de interpolación cúbica spline
    cs = CubicSpline(x, y)
    
    # Evaluar el spline en el punto xi
    return cs(xi)

def quadratic_interpolation(x, y, xi):
    """
    Interpolación segmentada cuadrática.
    
    Args:
        x: Lista de valores x conocidos.
        y: Lista de valores y conocidos correspondientes a x.
        xi: Punto en el que se desea interpolar.
        
    Returns:
        El valor interpolado en xi.
    """
    n = len(x)
    
    # Encuentra los índices de los puntos más cercanos a xi
    i = 0
    while i < n and x[i] < xi:
        i += 1
    
    # Ajusta una parábola a los puntos cercanos
    if i == 0:
        # Si xi está a la izquierda de todos los puntos
        x0, y0 = x[0], y[0]
        x1, y1 = x[1], y[1]
        x2, y2 = x[2], y[2]
    elif i == n:
        # Si xi está a la derecha de todos los puntos
        x0, y0 = x[-3], y[-3]
        x1, y1 = x[-2], y[-2]
        x2, y2 = x[-1], y[-1]
    else:
        # Si xi está entre dos puntos
        x0, y0 = x[i-1], y[i-1]
        x1, y1 = x[i], y[i]
        x2, y2 = x[i+1], y[i+1]
    
    # Calcula los coeficientes de la parábola
    a = ((y2 - y0) / ((x2 - x0) * (x2 - x1))) - ((y1 - y0) / ((x1 - x0) * (x2 - x1)))
    b = ((y1 - y0) / (x1 - x0)) - a * (x0 + x1)
    c = y0 - a * x0**2 - b * x0
    
    # Evalúa la parábola en xi
    yi = a * xi**2 + b * xi + c
    
    return yi

def modelo_no_lineal(x, a, b, c):
    """
    Modelo no lineal para la regresión.
    
    Args:
        x: Variable independiente.
        a, b, c: Parámetros del modelo.
        
    Returns:
        Valor predicho por el modelo.
    """
    return a * np.exp(-b * x) + c

def regresion_no_lineal(x, y):
    """
    Realiza regresión no lineal utilizando el modelo definido.
    
    Args:
        x: Variable independiente.
        y: Variable dependiente.
        
    Returns:
        Los parámetros óptimos del modelo.
    """
    # Ajusta el modelo a los datos utilizando curve_fit
    parametros_optimos, matriz_covarianza = curve_fit(modelo_no_lineal, x, y)
    
    return parametros_optimos

def main_menu():
    print("__________________________________________________________")
    print("")
    print("1. Interpolación de Newton hacia adelante")
    print("2. Interpolación de Newton hacia atrás")
    print("3. Interpolación de Newton con diferencias divididas")
    print("4. Interpolación de Lagrange")
    print("5. Regresión lineal")
    print("6. Regresión polinomial")
    print("7. Regresión lineal múltiple")
    print("8. Interpolación inversa")
    print("9. Interpolación segmentada (Cubic Spline)")
    print("10. Interpolación segmentada cuadrática")
    print("11. Regresión no lineal")
    print("0. Salir")
    print("")
    print("__________________________________________________________")


def input_data():
    n = int(input("Ingrese el número de puntos conocidos: "))
    x = []
    y = []
    for i in range(n):
        x.append(float(input(f"Ingrese el valor x{i+1}: ")))
        y.append(float(input(f"Ingrese el valor y{x[i]}: ")))
    return x, y

def choose_method():
    while True:
        main_menu()
        choice = input("Seleccione el método (0-11): ")
        if choice == '1':
            x, y = input_data()
            xi = float(input("Ingrese el valor en el que desea interpolar: "))
            print("Resultado:", interpNewton_forward_diff(x, y, xi))
        elif choice == '2':
            x, y = input_data()
            xi = float(input("Ingrese el valor en el que desea interpolar: "))
            print("Resultado:", interpNewton_backward_diff(x, y, xi))
        elif choice == '3':
            x, y = input_data()
            xi = float(input("Ingrese el valor en el que desea interpolar: "))
            print("Resultado:", interpNewton_divided_diff(x, y, xi))
        elif choice == '4':
            x, y = input_data()
            xi = float(input("Ingrese el valor en el que desea interpolar: "))
            print("Resultado:", lagrange_interpolation(x, y, xi))
        elif choice == '5':
            x, y = input_data()
            print("Resultado:", linear_regression(x, y))
        elif choice == '6':
            x, y = input_data()
            degree = int(input("Ingrese el grado del polinomio de regresión: "))
            print("Resultado:", polynomial_regression(x, y, degree))
        elif choice == '7':
            n = int(input("Ingrese el número de variables independientes: "))
            X = []
            for i in range(n):
                X.append(float(input(f"Ingrese el valor de la variable {i+1}: ")))
            y = float(input("Ingrese el valor de la variable dependiente: "))
            print("Resultado:", multiple_linear_regression(X, y))
        elif choice == '8':
            x, y = input_data()
            yi = float(input("Ingrese el valor de la variable dependiente para la interpolación inversa: "))
            print("Resultado:", inverse_interpolation(x, y, yi))
        elif choice == '9':
            x, y = input_data()
            xi = float(input("Ingrese el valor en el que desea interpolar: "))
            print("Resultado:", segmented_interpolation(x, y, xi))
        elif choice == '10':
            x, y = input_data()
            xi = float(input("Ingrese el valor en el que desea interpolar: "))
            print("Resultado:", quadratic_interpolation(x, y, xi))
        elif choice == '11':
            x, y = input_data()
            parametros_optimos = regresion_no_lineal(x, y)
            print("Parámetros óptimos:", parametros_optimos)
        elif choice == '0':
            print("Saliendo del programa...")
            break
        else:
            print("Opción inválida. Por favor, seleccione un número del 0 al 11.")

if __name__ == "__main__":

    choose_method()